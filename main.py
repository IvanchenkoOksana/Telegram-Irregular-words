import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from telegram.error import BadRequest
import json
import random
import os
import asyncio
from gtts import gTTS
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É (–Ω–∞—à "—Å–µ–π—Ñ")
load_dotenv()

# --- 1. –ù–∞—à—ñ –¥–∞–Ω—ñ ---

VERBS = [
    ["see", "saw", "seen", "–±–∞—á–∏—Ç–∏"], ["cut", "cut", "cut", "—Ä—ñ–∑–∞—Ç–∏"],
    ["go", "went", "gone", "–π—Ç–∏"], ["do", "did", "done", "—Ä–æ–±–∏—Ç–∏"],
    ["make", "made", "made", "—Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏"], ["take", "took", "taken", "–±—Ä–∞—Ç–∏"],
    ["get", "got", "gotten", "–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏"], ["give", "gave", "given", "–¥–∞–≤–∞—Ç–∏"],
    ["come", "came", "come", "–ø—Ä–∏—Ö–æ–¥–∏—Ç–∏"], ["think", "thought", "thought", "–¥—É–º–∞—Ç–∏"],
    ["buy", "bought", "bought", "–∫—É–ø—É–≤–∞—Ç–∏"], ["eat", "ate", "eaten", "—ó—Å—Ç–∏"],
    ["drink", "drank", "drunk", "–ø–∏—Ç–∏"], ["write", "wrote", "written", "–ø–∏—Å–∞—Ç–∏"],
    ["read", "read", "read", "—á–∏—Ç–∞—Ç–∏"], ["speak", "spoke", "spoken", "–≥–æ–≤–æ—Ä–∏—Ç–∏"],
    ["know", "knew", "known", "–∑–Ω–∞—Ç–∏"], ["find", "found", "found", "–∑–Ω–∞—Ö–æ–¥–∏—Ç–∏"],
    ["run", "ran", "run", "–±—ñ–≥—Ç–∏"], ["begin", "began", "begun", "–ø–æ—á–∏–Ω–∞—Ç–∏"]
]
PROGRESS_FILE = "user_progress.json"

# --- 2. –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º ---

def load_progress():
    if not os.path.exists(PROGRESS_FILE): return {}
    try:
        with open(PROGRESS_FILE, 'r', encoding='utf-8') as f: return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError): return {}

def save_progress(data):
    with open(PROGRESS_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# --- 3. –§—É–Ω–∫—Ü—ñ—ó-–æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ ---

def create_audio_sync(text_to_speak, filename):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞."""
    tts = gTTS(text=text_to_speak, lang='en', slow=False)
    tts.save(filename)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–æ—Å—Ç—ñ–π–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    # –û–ù–û–í–õ–ï–ù–ê –ö–õ–ê–í–Ü–ê–¢–£–†–ê: –¥–æ–¥–∞–Ω–æ –∫–Ω–æ–ø–∫—É "–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Å–ª—ñ–≤"
    reply_keyboard = [
        [KeyboardButton("–í—á–∏—Ç–∏ —Å–ª–æ–≤–∞ üá¨üáß"), KeyboardButton("–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Å–ª—ñ–≤ üîÅ")]
    ]
    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! üåü\n"
        "–Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –¥—ñ—î—Å–ª—ñ–≤!\n"
        "–†–∞–∑–æ–º –º–∏ –≤–∏–≤—á–∏–º–æ —ó—Ö –ª–µ–≥–∫–æ –π –≤–µ—Å–µ–ª–æ üí´\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É ‚Äî —ñ –≤–ø–µ—Ä–µ–¥ –¥–æ –Ω–æ–≤–∏—Ö –∑–Ω–∞–Ω—å! üöÄ"
    )
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True, one_time_keyboard=False
        ),
    )

async def send_new_verb_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–æ–≤—É –∫–∞—Ä—Ç–∫—É –∑ –¥—ñ—î—Å–ª–æ–≤–æ–º –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è."""
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id
    progress_data = load_progress()
    loop = asyncio.get_running_loop()

    known_verbs_infinitive = progress_data.get(user_id, [])
    unknown_verbs = [v for v in VERBS if v[0] not in known_verbs_infinitive]

    if not unknown_verbs:
        final_text = (
            "üéâ –£—Ä–∞! –¢–∏ –≤–∏–≤—á–∏–≤(–ª–∞) –≤—Å—ñ 20 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –¥—ñ—î—Å–ª—ñ–≤! ÔøΩ\n\n"
            "–¶–µ –≤–µ–ª–∏–∫–∏–π –∫—Ä–æ–∫ –Ω–∞ —à–ª—è—Ö—É –¥–æ –≤—ñ–ª—å–Ω–æ—ó –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó üí´\n\n"
            "–í–ø–µ—Ä–µ–¥ –¥–æ –Ω–æ–≤–∏—Ö –≤–µ—Ä—à–∏–Ω! üèÜ"
        )
        await context.bot.send_message(chat_id=chat_id, text=final_text)
        return

    verb = random.choice(unknown_verbs)
    v1, v2, v3, translation = verb
    text_to_speak = f"{v1}, {v2}, {v3}"
    audio_filename = f"verb_audio_{user_id}.mp3"
    
    await loop.run_in_executor(None, create_audio_sync, text_to_speak, audio_filename)
    
    verb_caption = (
        f"üìù *{v1.upper()} - {v2.upper()} - {v3.upper()}*\n\n"
        f"–ü–µ—Ä–µ–∫–ª–∞–¥: *{translation}*"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–Ω–∞—é —Ü–µ –¥—ñ—î—Å–ª–æ–≤–æ", callback_data=f'know_{v1}')],
        [InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –¥—ñ—î—Å–ª–æ–≤–æ", callback_data='learn_word')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    with open(audio_filename, 'rb') as audio_file:
        await context.bot.send_audio(
            chat_id=chat_id, audio=audio_file,
            caption=verb_caption, reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    os.remove(audio_filename)

async def send_repetition_verb_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–∞—Ä—Ç–∫—É –∑ –¥—ñ—î—Å–ª–æ–≤–æ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è."""
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id
    progress_data = load_progress()
    loop = asyncio.get_running_loop()

    known_verbs_infinitive = progress_data.get(user_id, [])
    
    if not known_verbs_infinitive:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í–∏ —â–µ –Ω–µ –≤–∏–≤—á–∏–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–í—á–∏—Ç–∏ —Å–ª–æ–≤–∞ üá¨üáß', —â–æ–± –ø–æ—á–∞—Ç–∏!"
        )
        return

    # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏–≤—á–µ–Ω–∏—Ö
    random_verb_infinitive = random.choice(known_verbs_infinitive)
    verb = next((v for v in VERBS if v[0] == random_verb_infinitive), None)

    if not verb: return # –ü—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —Å–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

    v1, v2, v3, translation = verb
    text_to_speak = f"{v1}, {v2}, {v3}"
    audio_filename = f"verb_audio_{user_id}.mp3"
    
    await loop.run_in_executor(None, create_audio_sync, text_to_speak, audio_filename)
    
    verb_caption = (
        f"üìù *{v1.upper()} - {v2.upper()} - {v3.upper()}*\n\n"
        f"–ü–µ—Ä–µ–∫–ª–∞–¥: *{translation}*"
    )
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è", callback_data='repeat_word')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    with open(audio_filename, 'rb') as audio_file:
        await context.bot.send_audio(
            chat_id=chat_id, audio=audio_file,
            caption=verb_caption, reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    os.remove(audio_filename)

async def inline_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    
    try:
        await query.message.delete()
    except BadRequest:
        pass

    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤
    if query.data.startswith('know_') or query.data == 'learn_word':
        if query.data.startswith('know_'):
            verb_to_add = query.data.split('_')[1]
            progress_data = load_progress()
            if user_id not in progress_data:
                progress_data[user_id] = []
            if verb_to_add not in progress_data[user_id]:
                progress_data[user_id].append(verb_to_add)
            save_progress(progress_data)
        await send_new_verb_card(update, context)

    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Å–ª—ñ–≤
    elif query.data == 'repeat_word':
        await send_repetition_verb_card(update, context)

# --- 4. –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ ---

def main():
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞."""
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        print("–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_TOKEN. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
        return

    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex("^–í—á–∏—Ç–∏ —Å–ª–æ–≤–∞ üá¨üáß$"), send_new_verb_card))
    application.add_handler(MessageHandler(filters.Regex("^–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Å–ª—ñ–≤ üîÅ$"), send_repetition_verb_card))
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö inline-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(inline_button_callback))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏...")
    application.run_polling()

if __name__ == '__main__':
    main()
    